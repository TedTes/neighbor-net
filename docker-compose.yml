version: "3"

services:
  api-gateway:
    build:
      context: ./
      dockerfile: api-gateway-docker-file
    ports:
      - "80:80" # Exposed NGINX on port 80
    depends_on:
      - auth-service
      - chat-service
      - inventory-service
      - news-feed-service
      - search-service
      - frontend
      - user-service
      - notification-service
    networks:
      - neighbor-net
    volumes:
      - shared-assets:/usr/share/nginx/html
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf

  auth-service:
    build:
      context: ./
      dockerfile: auth-service-docker-file
    ports:
      - "3000:3000"
    networks:
      - neighbor-net
    depends_on:
      - auth-service-postgresDB
    env_file:
      - ./auth-service/.env

  chat-service:
    build:
      context: ./
      dockerfile: chat-service-docker-file
    ports:
      - "3001:3001"
    networks:
      - neighbor-net
    depends_on:
      - chat-service-mongoDB
    env_file:
      - ./chat-service/.env
  inventory-service:
    build:
      context: ./
      dockerfile: inventory-service-docker-file
    ports:
      - "3002:3002"
    networks:
      - neighbor-net
    depends_on:
      - inventory-service-MySqlDB
    env_file:
      - ./inventory-service/.env
  news-feed-service:
    build:
      context: ./
      dockerfile: news-feed-service-docker-file
    ports:
      - "3003:3003"
    networks:
      - neighbor-net
    depends_on:
      - news-feed-service-mongoDB
    # volumes:
    #   - ./news-feed-service:/news-feed-service
    env_file:
      - ./news-feed-service/.env

  search-service:
    build:
      context: ./
      dockerfile: search-service-docker-file
    ports:
      - "3004:3004"
    depends_on:
      - search-service-elasticsearch
    environment:
      - SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINT=elasticsearch:9200
    networks:
      - neighbor-net

  user-service:
    build:
      context: ./
      dockerfile: user-service-docker-file
    ports:
      - "3005:3005"
    depends_on:
      - user-service-postgresDB
    networks:
      - neighbor-net
    environment:
      - NODE_ENV=development
    # volumes:
    #   - ./user-service:/user-service
    env_file:
      - ./user-service/.env

  notification-service:
    build:
      context: ./
      dockerfile: notification-service-docker-file
    ports:
      - "3006:3006"
    depends_on:
      - notification-service-redis
    environment:
      - REDIS_HOST=notification-service-redis
      - REDIS_PORT=6379
    # volumes:
    #   - ./notification-service:/notification-service
    env_file:
      - ./notification-service/.env
    networks:
      - neighbor-net
  frontend:
    build:
      context: ./
      dockerfile: frontend-docker-file
    ports:
      - "3007:3007"
    networks:
      - neighbor-net
    volumes:
      - shared-assets:/frontend/dist

  # Databases and other services

  inventory-service-MySqlDB:
    image: mysql:8.0
    ports:
      - "3310:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - neighbor-net
    environment:
      MYSQL_ROOT_PASSWORD: root_test
      MYSQL_DATABASE: inventory_db
      MYSQL_USER: inventoryuser
      MYSQL_PASSWORD: test

  auth-service-postgresDB:
    image: postgres:14
    ports:
      - "5433:5432" # Exposed on 5433 to avoid conflict
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    networks:
      - neighbor-net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: auth_db

  user-service-postgresDB:
    image: postgres:14
    ports:
      - "5434:5432" # Exposed on 5434 to avoid conflict
    volumes:
      - user_pgdata:/var/lib/postgresql/data
    networks:
      - neighbor-net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: user_db
  news-feed-service-mongoDB:
    image: mongo:5.0
    ports:
      - "27021:27017"
    volumes:
      - newsfeed-mongo-data:/data/db
    networks:
      - neighbor-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: test
      MONGO_INITDB_DATABASE: newsfeed_db
  chat-service-mongoDB:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - chat-mongo-data:/data/db
    networks:
      - neighbor-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: test
      MONGO_INITDB_DATABASE: chat_db
  notification-service-redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - neighbor-net

  search-service-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - neighbor-net

# Networks
networks:
  neighbor-net:
    driver: bridge

# Volumes
volumes:
  shared-assets:
  redis-data:
  mysql_data:
  auth_pgdata:
  user_pgdata:
  chat-mongo-data:
  newsfeed-mongo-data:
